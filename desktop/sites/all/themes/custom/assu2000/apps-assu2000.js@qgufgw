
$(document).ready(function () {
	 Drupal.behaviors.assu2000_custom = {
			    // Put custom js here.
			    attach: function(context) {
			      $('.paybox-auto-submit-click').click();
			    }
	  };
});

Drupal.behaviors.exampleModule = {
  attach: function (context, settings) {
    $('#date-circulation input').on('mouseout', function() { $(this).blur() });
  }
};


/**
 * amaeDateFormatting(p_event)
 *
 * @param p_event
 * @returns {boolean|*}
 */
function amaeDateFormatting(p_event) {

  var input = p_event.target;
  var date  = input.value.replace(new RegExp("/[^\d]/gi", 'g'), "");
  formatOk = true;

  var dateTab=CutDateWithoutSeparator(date);
  if(CheckDate(dateTab[0],dateTab[1],dateTab[2])) {
    input.value = FormatDate(dateTab[0],dateTab[1],dateTab[2]);
  } else {
    formatOk = false;
    //input.value="";
  }
  return formatOk;

}

/**
 * CutDateWithoutSeparator(date)
 *
 * @param date
 * @returns {Array}
 * @constructor
 */
function CutDateWithoutSeparator(date) {
    var dateTab = new Array();
    if (date.length < 5) {
        dateTab[2] = date.substring(2, date.length);
        dateTab[1] = date.substring(1, 2);
        dateTab[0] = date.substring(0, 1);
    } else if (date.length == 5) {
        if (date.substring(1, 3) > 12) {
            dateTab[2] = date.substring(3, 5);
            dateTab[1] = date.substring(2, 3);
            dateTab[0] = date.substring(0, 2);
        } else {
            dateTab[2] = date.substring(3, 5);
            dateTab[1] = date.substring(1, 3);
            dateTab[0] = date.substring(0, 1);
        }
    } else if (date.length == 6) {
        if (date.substring(2, 4) > 12) {
            dateTab[2] = date.substring(2, 6);
            dateTab[1] = date.substring(1, 2);
            dateTab[0] = date.substring(0, 1);
        } else {
            dateTab[2] = date.substring(4, 6);
            dateTab[1] = date.substring(2, 4);
            dateTab[0] = date.substring(0, 2);
        }
    } else if (date.length == 7) {
        if (date.substring(1, 3) > 12) {
            dateTab[2] = date.substring(3, 7);
            dateTab[1] = date.substring(2, 3);
            dateTab[0] = date.substring(0, 2);
        } else {
            dateTab[2] = date.substring(3, 7);
            dateTab[1] = date.substring(1, 3);
            dateTab[0] = date.substring(0, 1);
        }
    } else if (date.length == 8) {
        dateTab[2] = date.substring(4, 8);
        dateTab[1] = date.substring(2, 4);
        dateTab[0] = date.substring(0, 2);
    }
    return dateTab;
}

/**
 * CheckDate(day, month, year)
 *
 * @param day
 * @param month
 * @param year
 * @returns {boolean}
 * @constructor
 */
function CheckDate(day, month, year) {

    if (isNaN(day) || day < 1 || day > 31)
        return (false);
    if (isNaN(month) || month < 1 || month > 12)
        return (false);

    if ((month == 4 || month == 6 || month == 9 || month == 11) && day > 30)
        return (false);

    year = FormatYear(year);
    if (isNaN(year) || (year % 4 != 0 && month == "02" && day > 28) || year < 0 || (year.indexOf("+") != -1) || (year.indexOf(".") != -1))
        return (false);

    return (true);
}

/**
 * FormatYear(year)
 *
 * @param year
 * @returns {*}
 * @constructor
 */
function FormatYear(year) {
    if (!isNaN(year)) {
        year = (year.length == 1) ? "0" + year : year;
        return ((year.length == 2) ? ((year < 20) ? "20" + year : "19" + year) : year);
    }
}

/**
 * FormatDate(day, month, year)
 *
 * @param day
 * @param month
 * @param year
 * @returns {string}
 * @constructor
 */
function FormatDate(day, month, year) {
    day = (day.length == 1) ? "0" + day : day;
    month = (month.length == 1) ? "0" + month : month;
    year = FormatYear(year);
    return (day + "/" + month + "/" + year);
}